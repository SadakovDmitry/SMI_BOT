from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import db

class ReplyForm(StatesGroup):
    waiting_request_id = State()
    waiting_question = State()

class NewRequestForm(StatesGroup):
    waiting_request_id = State()
    waiting_question = State()

# def get_role_kb() -> ReplyKeyboardMarkup:
#     builder = ReplyKeyboardBuilder()
#     # –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
#     builder.button(text="/new_request")
#     builder.button(text="/reply")
#     builder.button(text="/ask")
#     builder.button(text="/status")
#     # —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
#     builder.adjust(2)
#     # —Å–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
#     return builder.as_markup(resize_keyboard=True)

bot = None
send_email = None

class RequestForm(StatesGroup):
    choosing_spec = State()
    choosing_speakers = State()
    entering_title = State()
    entering_deadline = State()
    entering_format = State()
    entering_content = State()

class RevisionState(StatesGroup):
    waiting_comment = State()


# ================================================================================================================
#                                           NEW_REQUEST
# ================================================================================================================


async def cmd_new_request(message: types.Message, state: FSMContext):
    user = await db.get_user_by_tg_id(message.from_user.id)
    if not user or user[4] != 'journalist':
        return await message.answer("–¢–æ–ª—å–∫–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞–º.")
    specs = await db.list_specializations()
    if not specs:
        return await message.answer("–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π.")

    await state.set_state(RequestForm.choosing_spec)
    b = InlineKeyboardBuilder()
    for sid, name in specs:
        b.button(text=name, callback_data=f"pick_spec_{sid}")
    b.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:", reply_markup=b.as_markup())


async def spec_chosen(callback: types.CallbackQuery, state: FSMContext):
    _, _, spec_id = callback.data.split('_')
    spec_id = int(spec_id)
    await state.update_data(spec_id=spec_id)

    # 1) fetch both specialized and unspecialized speakers
    spec_speakers   = await db.get_speakers_by_specialization(spec_id)
    unspec_speakers = await db.get_speakers_without_specialization()
    # merge, avoiding duplicates
    all_speakers = {s[0]: s for s in spec_speakers}
    for s in unspec_speakers:
        all_speakers.setdefault(s[0], s)
    sp_map = {str(uid): (tg, name or email)
              for uid, tg, name, email in all_speakers.values()}

    # 2) store for later
    await state.update_data(potential_speakers=sp_map, selected_speakers=[])

    # 3) build the keyboard
    kb = InlineKeyboardBuilder()
    kb.button(text="‚òê –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö", callback_data="toggle_spk_all")
    for uid, (tg, nm) in sp_map.items():
        kb.button(text=f"‚òê {nm}", callback_data=f"toggle_spk_{uid}")
    kb.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_select")
    kb.adjust(2)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", reply_markup=kb.as_markup())
    await state.set_state(RequestForm.choosing_speakers)
    await callback.answer()


async def toggle_speaker(callback: types.CallbackQuery, state: FSMContext):
    _, _, uid = callback.data.split('_')
    data = await state.get_data()
    selected = set(data['selected_speakers'])
    sp_map   = data['potential_speakers']

    if uid == "all":
        # flip‚Äêflop select all vs none
        if "all" in selected:
            selected.clear()
        else:
            selected = set(sp_map.keys()) | {"all"}
    else:
        if uid in selected:
            selected.remove(uid)
            selected.discard("all")
        else:
            selected.add(uid)
            # if every single speaker is now selected, mark "all" too
            if set(sp_map.keys()) <= selected:
                selected |= set(sp_map.keys()) | {"all"}

    await state.update_data(selected_speakers=list(selected))

    # rebuild KB to show checks
    kb = InlineKeyboardBuilder()
    kb.button(
      text=("‚òëÔ∏è" if "all" in selected else "‚òê") + " –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö",
      callback_data="toggle_spk_all"
    )
    for sid, (tg, nm) in sp_map.items():
        mark = "‚úÖ" if sid in selected else "‚òê"
        kb.button(text=f"{mark} {nm}", callback_data=f"toggle_spk_{sid}")
    kb.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_select")
    kb.adjust(2)

    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await callback.answer()


async def done_selecting(callback: types.CallbackQuery, state: FSMContext):
    data     = await state.get_data()
    selected = data['selected_speakers']
    sp_map   = data['potential_speakers']

    if not selected:
        return await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞.", show_alert=True)

    # if they hit ‚Äúall‚Äù, pick every real speaker
    if "all" in selected:
        chosen = [int(uid) for uid in sp_map.keys()]
    else:
        chosen = [int(uid) for uid in selected]

    await state.update_data(chosen_speaker_ids=chosen)
    await callback.message.edit_text("–°–ø–∏–∫–µ—Ä—ã –≤—ã–±—Ä–∞–Ω—ã.")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞:")
    await state.set_state(RequestForm.entering_title)
    await callback.answer()


async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-10):")
    await state.set_state(RequestForm.entering_deadline)


async def process_deadline(message: types.Message, state: FSMContext):
    await state.update_data(deadline=message.text.strip())
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Ç.–¥.):")
    await state.set_state(RequestForm.entering_format)


async def process_format(message: types.Message, state: FSMContext):
    await state.update_data(format=message.text.strip())
    await message.answer("–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:")
    await state.set_state(RequestForm.entering_content)


async def process_content(message: types.Message, state: FSMContext):
    content = message.text.strip()
    if not content:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    data = await state.get_data()
    spec_id = data['spec_id']
    title = data['title']
    deadline = data['deadline']
    fmt = data['format']
    speakers = data['chosen_speaker_ids']
    journalist = await db.get_user_by_tg_id(message.from_user.id)
    req_id = await db.create_request(journalist[0], spec_id, title, deadline, fmt, content, speakers)
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–ø–∏–∫–µ—Ä–∞–º
    spec = await db.get_specialization_by_id(spec_id)
    spec_name = spec[1]
    for sp_id in speakers:
        user = await db.get_user_by_id(sp_id)
        text = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ({spec_name})\n"
            f"–¢–µ–º–∞: {title}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {deadline}\n"
            f"–§–æ—Ä–º–∞—Ç: {fmt}\n"
            f"{content}\n\n"
            f"–ü—Ä–∏–Ω—è—Ç—å /decline –∑–∞–ø—Ä–æ—Å"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"req_{req_id}_accept_{sp_id}")
        builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"req_{req_id}_decline_{sp_id}")
        keyboard = builder.as_markup()
        await bot.send_message(user[1], text, reply_markup=keyboard)
    await message.answer(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (ID –∑–∞–ø—Ä–æ—Å–∞ {req_id}). ")
    await state.clear()


# ================================================================================================================
#                                           MARK COMPLETED
# ================================================================================================================



# async def handle_accept(callback: types.CallbackQuery):
#     _, req_id_str, _, sp_id_str = callback.data.split('_')
#     req_id, sp_id = int(req_id_str), int(sp_id_str)
#
#     # 1) –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
#     await db.update_invite_status(req_id, sp_id, 'accepted')
#     await db.mark_request_in_progress(req_id)
#     await db.set_chosen_speaker(req_id, sp_id)
#
#     # 2) —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–∞–º–æ–≥–æ callback-—Å–æ–æ–±—â–µ–Ω–∏—è
#     await callback.message.edit_reply_markup(reply_markup=None)
#
#     # 3) —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ (pending -> cancelled)
#     invites = await db.get_invites_for_request(req_id)
#     for other_sp_id, status, *_ in invites:
#         if status == 'pending':
#             # –ø–æ–º–µ—á–∞–µ–º —É –Ω–∏—Ö cancelled
#             await db.update_invite_status(req_id, other_sp_id, 'cancelled')
#             usr = await db.get_user_by_id(other_sp_id)
#             await bot.send_message(
#                 usr[1],
#                 "–ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —É–∂–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏–∫–µ—Ä, —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ."
#             )
#
#     # 4) —É–≤–µ–¥–æ–º–ª—è–µ–º –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞
#     req = await db.get_request_by_id(req_id)
#     journ = await db.get_user_by_id(req[1])
#     # —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ–∫–Ω–æ–ø–æ—á–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –ñ–£–†–ù–ê–õ–ò–°–¢–ê
#     kb = InlineKeyboardBuilder()
#     kb.button(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"stop_{req_id}")
#     await bot.send_message(
#         journ[1],
#         f"–°–ø–∏–∫–µ—Ä –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å (ID {req_id}).",
#         reply_markup=kb.as_markup()
#     )
#
#     await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å.")

async def handle_decline(callback: types.CallbackQuery):
    _, req_id, _, sp_id = callback.data.split('_')
    req_id, sp_id = int(req_id), int(sp_id)

    # 1) –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    await db.update_invite_status(req_id, sp_id, 'declined')

    # 2) –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
    await callback.message.delete()

    # 3) –î–∞–µ–º —Ñ–∏–¥–±—ç–∫ —Å–ø–∏–∫–µ—Ä—É
    await callback.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.")


async def handle_stop(callback: types.CallbackQuery):
    _, req_id = callback.data.split('_')
    req_id = int(req_id)
    invites = await db.get_invites_for_request(req_id)
    for sp_id, status, *_ in invites:
        if status == 'pending':
            await db.update_invite_status(req_id, sp_id, 'cancelled')
            user = await db.get_user_by_id(sp_id)
            await bot.send_message(user[1], "–°–ø–∏–∫–µ—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É —É–∂–µ –Ω–∞–π–¥–µ–Ω—ã.")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# async def cmd_ask(message: types.Message):
#     """–°–ø–∏–∫–µ—Ä –∑–∞–¥–∞–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—É: /ask <request_id> <—Ç–µ–∫—Å—Ç>"""
#     parts = message.text.split(maxsplit=2)
#     if len(parts) < 3:
#         await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ask <ID –∑–∞–ø—Ä–æ—Å–∞> <—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞>")
#         return
#     _, req_id_str, question = parts
#     try:
#         req_id = int(req_id_str)
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞.")
#         return
#     inv = await db.get_invite(req_id, (await db.get_user_by_tg_id(message.from_user.id))[0])
#     if not inv or inv[3] != 'accepted':
#         await message.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –µ–≥–æ.")
#         return
#     req = await db.get_request_by_id(req_id)
#     journ = await db.get_user_by_id(req[1])
#     await bot.send_message(journ[1], f"–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞–ø—Ä–æ—Å—É {req_id}: {question}")
#     await message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—É.")


# async def cmd_answer(message: types.Message):
#     """–°–ø–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—É: /answer <request_id> <—Ç–µ–∫—Å—Ç>"""
#     parts = message.text.split(maxsplit=2)
#     if len(parts) < 3:
#         await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /answer <ID –∑–∞–ø—Ä–æ—Å–∞> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
#         return
#     _, req_id_str, answer = parts
#     try:
#         req_id = int(req_id_str)
#     except ValueError:
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞.")
#         return
#     user = await db.get_user_by_tg_id(message.from_user.id)
#     await db.record_answer(req_id, user[0], answer)
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
#     req = await db.get_request_by_id(req_id)
#     journ = await db.get_user_by_id(req[1])
#     keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
#     builder = InlineKeyboardBuilder()
#     builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"ans_{req_id}_{user[0]}")
#     builder.button(text="‚úèÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏", callback_data=f"rev_{req_id}_{user[0]}")
#     keyboard = builder.as_markup()
#     await bot.send_message(journ[1], f"–û—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É {req_id}:\n{answer}", reply_markup=keyboard)
#     await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—É.")


async def handle_accept_answer(callback: types.CallbackQuery):
    _, req_id, sp_id = callback.data.split('_')
    req_id, sp_id = int(req_id), int(sp_id)
    await db.accept_answer(req_id, sp_id)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ø–∏–∫–µ—Ä–∞
    sp = await db.get_user_by_id(sp_id)
    await bot.send_message(sp[1], "–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.")


async def handle_request_revision(callback: types.CallbackQuery, state: FSMContext):
    _, req_id, sp_id = callback.data.split('_')
    await state.update_data(req_id=int(req_id), sp_id=int(sp_id))
    await state.set_state(RevisionState.waiting_comment)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏:")
    await callback.answer()


async def process_revision(message: types.Message, state: FSMContext):
    data = await state.get_data()
    req_id = data['req_id']
    sp_id = data['sp_id']
    comment = message.text.strip()
    await db.mark_revision_requested(req_id, sp_id)
    sp = await db.get_user_by_id(sp_id)
    await bot.send_message(sp[1], f"–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç –ø—Ä–æ—Å–∏—Ç –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É {req_id}: {comment}")
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏–∫–µ—Ä—É.")
    await state.clear()


# ================================================================================================================
#                                           REPLY
# ================================================================================================================


async def cmd_reply_start(message: types.Message, state: FSMContext):
    user = await db.get_user_by_tg_id(message.from_user.id)
    if not user or user[4] != 'journalist':
        return await message.answer("–¢–æ–ª—å–∫–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—ã.")
    await state.set_state(ReplyForm.waiting_request_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø—Ä–æ—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=None)


async def process_reply_id(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text.isdigit():
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    me = await db.get_user_by_tg_id(message.from_user.id)
    req = await db.get_request_by_id(int(text))
    if not req or req[1] != me[0]:
        await message.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
        return await state.clear()

    await state.update_data(request_id=int(text))
    await state.set_state(ReplyForm.waiting_question)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª:")

async def process_reply_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    req_id = data['request_id']
    # answer = message.text.strip()
    req = await db.get_request_by_id(req_id)

    sp_id = req[8]
    if not sp_id:
        await message.answer("–°–ø–∏–∫–µ—Ä –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return await state.clear()
    sp = await db.get_user_by_id(sp_id)

    if message.document:
        caption = f"‚úâÔ∏è –û—Ç–≤–µ—Ç –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å {req_id}:\n"
        if message.caption:
            caption += message.caption
        await bot.send_document(
            sp[1],
            document=message.document.file_id,
            caption=caption
        )
    else:
        # send plain text answer
        text = message.text or ""
        await bot.send_message(
            sp[1],
            f"‚úâÔ∏è –û—Ç–≤–µ—Ç –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å {req_id}:\n{text}"
        )
    # await bot.send_message(sp[1], f"–û—Ç–≤–µ—Ç –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å {req_id}:\n{answer}")
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–∏–∫–µ—Ä—É.")
    await state.clear()


async def cmd_reply(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <ID –∑–∞–ø—Ä–æ—Å–∞> <—Ç–µ–∫—Å—Ç>")
    _, req_str, text = parts
    try:
        req_id = int(req_str)
    except:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID.")
    me = await db.get_user_by_tg_id(message.from_user.id)
    req = await db.get_request_by_id(req_id)
    if not req or req[1] != me[0]:
        return await message.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.")

    sp_id = req[8]
    if not sp_id:
        return await message.answer("–°–ø–∏–∫–µ—Ä –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    sp = await db.get_user_by_id(sp_id)
    await bot.send_message(sp[1], f"–û—Ç–≤–µ—Ç –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å {req_id}:\n{text}")
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–∏–∫–µ—Ä—É.")


# ================================================================================================================
#                                           STATUS
# ================================================================================================================


async def cmd_status(message: types.Message):
    user = await db.get_user_by_tg_id(message.from_user.id)
    if not user:
        return await message.answer("–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    role = user[4]
    if role not in ('journalist', 'speaker'):
        return await message.answer("–¢–æ–ª—å–∫–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞–º –∏ —Å–ø–∏–∫–µ—Ä–∞–º.")

    lines = ["–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:"]
    if role == 'journalist':
        # r = (id, spec_id, title, deadline, format, content, status, chosen_speaker_id)
        for r in await db.get_requests_by_journalist(user[0]):
            lines.append(f"ID {r[0]}: ¬´{r[2]}¬ª ‚Äî —Å—Ç–∞—Ç—É—Å {r[6]}\n")
    else:  # speaker
        # r = (id, title, deadline, request_status, invite_status, ...)
        for r in await db.get_requests_for_speaker(user[0]):
            lines.append(
                f"ID {r[0]}: ¬´{r[1]}¬ª ‚Äî —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞: {r[3]}, –¥–µ–¥–ª–∞–π–Ω: {r[2]}\n"
            )

    await message.answer("\n".join(lines))


# ================================================================================================================
#                                           HANDLERS
# ================================================================================================================


def register_handlers_journalist(dp: Dispatcher, bot_obj, email_func):
    global bot, send_email
    bot = bot_obj
    send_email = email_func
    dp.message.register(cmd_new_request, Command('new_request'), StateFilter(None))
    dp.callback_query.register(spec_chosen, lambda c: c.data.startswith('pick_spec_'), StateFilter(RequestForm.choosing_spec))
    dp.callback_query.register(toggle_speaker, lambda c: c.data.startswith('toggle_spk_'), StateFilter(RequestForm.choosing_speakers))
    dp.callback_query.register(done_selecting, lambda c: c.data == 'done_select', StateFilter(RequestForm.choosing_speakers))
    dp.message.register(process_title, StateFilter(RequestForm.entering_title))
    dp.message.register(process_deadline, StateFilter(RequestForm.entering_deadline))
    dp.message.register(process_format, StateFilter(RequestForm.entering_format))
    dp.message.register(process_content, StateFilter(RequestForm.entering_content))
    # dp.callback_query.register(handle_accept, lambda c: c.data.startswith('req_') and '_accept_' in c.data)
    dp.callback_query.register(handle_decline, lambda c: c.data.startswith('req_') and '_decline_' in c.data)
    dp.callback_query.register(handle_stop, lambda c: c.data.startswith('stop_'))
    # dp.message.register(cmd_ask, Command('ask'), StateFilter(None))
    # dp.message.register(cmd_answer, Command('answer'), StateFilter(None))
    dp.callback_query.register(handle_accept_answer, lambda c: c.data.startswith('ans_'))
    dp.callback_query.register(handle_request_revision, lambda c: c.data.startswith('rev_'), StateFilter(None))
    dp.message.register(process_revision, StateFilter(RevisionState.waiting_comment))
    dp.message.register(cmd_reply, Command('reply'), StateFilter(None))
    dp.message.register(cmd_status, Command('status'), StateFilter(None))
    dp.message.register(cmd_status, lambda c: c.text == '–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤', StateFilter(None))
    dp.message.register(cmd_reply_start, lambda c: c.text == '–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–ø—Ä–æ—Å—É', StateFilter(None))
    dp.message.register(process_reply_id, StateFilter(ReplyForm.waiting_request_id))
    dp.message.register(process_reply_text, StateFilter(ReplyForm.waiting_question))
    dp.message.register(cmd_new_request, lambda c: c.text == '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', StateFilter(None))
