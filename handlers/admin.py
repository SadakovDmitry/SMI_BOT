# handlers/admin.py

from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.state import StateFilter
from aiogram.types import BufferedInputFile
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import db
import pandas as pd
from io import BytesIO

bot = None
send_email = None

# ================================================================================================================
#  FSM –¥–ª—è ¬´–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é¬ª
# ================================================================================================================
class AddSpecState(StatesGroup):
    waiting_name = State()

async def cmd_add_spec_start(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ FSM –ø–æ –∫–Ω–æ–ø–∫–µ '–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é'"""
    await state.set_state(AddSpecState.waiting_name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")

async def process_add_spec(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    name = message.text.strip()
    if not name:
        return await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
    await db.add_specialization(name)
    await message.answer(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

# ================================================================================================================
#  Broadcast FSM
# ================================================================================================================
class BroadcastState(StatesGroup):
    waiting_comment = State()

async def cmd_broadcast_journalists_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞–º –ø–æ –∫–Ω–æ–ø–∫–µ"""
    await state.update_data(broadcast_type='journalist')
    await message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞–º:")
    await state.set_state(BroadcastState.waiting_comment)

async def cmd_broadcast_speakers_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ø–∏–∫–µ—Ä–∞–º –ø–æ –∫–Ω–æ–ø–∫–µ"""
    await state.update_data(broadcast_type='speaker')
    await message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–ø–∏–∫–µ—Ä–∞–º:")
    await state.set_state(BroadcastState.waiting_comment)

async def cmd_broadcast_all_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ"""
    await state.update_data(broadcast_type='all')
    await message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(BroadcastState.waiting_comment)

async def process_broadcast(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    data = await state.get_data()
    text = message.text
    btype = data.get('broadcast_type')

    if btype == 'journalist':
        ids = await db.get_all_user_ids_by_role('journalist')
    elif btype == 'speaker':
        ids = await db.get_all_user_ids_by_role('speaker')
    else:
        # –≤—Å–µ –≤–º–µ—Å—Ç–µ, –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        ids = (await db.get_all_user_ids_by_role('journalist')) + \
              (await db.get_all_user_ids_by_role('speaker'))

    for tg in set(ids):
        await bot.send_message(tg, text)
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    await state.clear()

# ================================================================================================================
#  –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
# ================================================================================================================

async def cmd_add_spec(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_spec <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
    await db.add_specialization(parts[1].strip())
    await message.answer(f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è '{parts[1].strip()}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def cmd_broadcast_journalists(message: types.Message):
    """–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è: /broadcast_journalists —Ç–µ–∫—Å—Ç"""
    text = message.text.partition(' ')[2]
    if not text:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_journalists <—Ç–µ–∫—Å—Ç>")
    for tg in await db.get_all_user_ids_by_role('journalist'):
        await bot.send_message(tg, text)
    await message.answer("‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞–º.")

async def cmd_broadcast_speakers(message: types.Message):
    text = message.text.partition(' ')[2]
    if not text:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_speakers <—Ç–µ–∫—Å—Ç>")
    for tg in await db.get_all_user_ids_by_role('speaker'):
        await bot.send_message(tg, text)
    await message.answer("‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ —Å–ø–∏–∫–µ—Ä–∞–º.")

async def cmd_broadcast_all(message: types.Message):
    text = message.text.partition(' ')[2]
    if not text:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_all <—Ç–µ–∫—Å—Ç>")
    all_ids = set(
        await db.get_all_user_ids_by_role('journalist') +
        await db.get_all_user_ids_by_role('speaker')
    )
    for tg in all_ids:
        await bot.send_message(tg, text)
    await message.answer("‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º.")

async def cmd_export(message: types.Message):
    # —ç–∫—Å–ø–æ—Ä—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π xlsx
    users = await db.get_all_users()
    requests = await db.get_all_requests()

    df_u = pd.DataFrame(users, columns=['id','username','email','role'])
    buf1 = BytesIO()
    df_u.to_excel(buf1, index=False, engine='openpyxl'); buf1.seek(0)
    file1 = BufferedInputFile(buf1.getvalue(), filename='users.xlsx')

    df_r = pd.DataFrame(
        requests,
        columns=['id','journalist','spec','topic','deadline','format','content','status','chosen_speaker']
    )
    buf2 = BytesIO()
    df_r.to_excel(buf2, index=False, engine='openpyxl'); buf2.seek(0)
    file2 = BufferedInputFile(buf2.getvalue(), filename='requests.xlsx')

    await bot.send_document(message.chat.id, file1)
    await bot.send_document(message.chat.id, file2)
    await message.answer("üìä –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤!")

async def cmd_status_all(message: types.Message):
    text = "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
    for r in await db.get_all_requests():
        text += f"ID {r[0]}: {r[3]} ‚Äî {r[7]}\n"
    await message.answer(text)

# ================================================================================================================
#  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# ================================================================================================================

def register_handlers_admin(dp: Dispatcher, bot_obj, email_func):
    global bot, send_email
    bot = bot_obj
    send_email = email_func

    # ‚Äî slash-commands ‚Äî
    dp.message.register(cmd_add_spec,               Command('add_spec'), StateFilter(None))
    dp.message.register(cmd_broadcast_journalists,  Command('broadcast_journalists'), StateFilter(None))
    dp.message.register(cmd_broadcast_speakers,     Command('broadcast_speakers'), StateFilter(None))
    dp.message.register(cmd_broadcast_all,          Command('broadcast_all'), StateFilter(None))
    dp.message.register(cmd_export,                 Command('export'), StateFilter(None))
    dp.message.register(cmd_status_all,             Command('status_all'), StateFilter(None))

    # ‚Äî –∫–Ω–æ–ø–∫–∏ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî
    dp.message.register(cmd_add_spec_start,              lambda c: c.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é', StateFilter(None))
    dp.message.register(cmd_broadcast_journalists_start, lambda c: c.text == '–†–∞—Å—Å—ã–ª–∫–∞ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞–º', StateFilter(None))
    dp.message.register(cmd_broadcast_speakers_start,    lambda c: c.text == '–†–∞—Å—Å—ã–ª–∫–∞ —Å–ø–∏–∫–µ—Ä–∞–º',   StateFilter(None))
    dp.message.register(cmd_broadcast_all_start,         lambda c: c.text == '–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º',       StateFilter(None))
    dp.message.register(cmd_export,                      lambda c: c.text == '–ü–æ–∫–∞–∑–∞—Ç—å BD',         StateFilter(None))
    dp.message.register(cmd_status_all,                  lambda c: c.text == '–°—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', StateFilter(None))

    # ‚Äî FSM –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî
    dp.message.register(process_add_spec,  StateFilter(AddSpecState.waiting_name))
    dp.message.register(process_broadcast, StateFilter(BroadcastState.waiting_comment))
