from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.types import BufferedInputFile
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import db
import pandas as pd
from io import BytesIO

def get_role_kb() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    # –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    builder.button(text="/add_spec")
    builder.button(text="/broadcast_journalists")
    builder.button(text="/broadcast_speakers")
    builder.button(text="/broadcast_all")
    builder.button(text="/export")
    builder.button(text="/status_all")
    # —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(2)
    # —Å–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    return builder.as_markup(resize_keyboard=True)

bot = None
send_email = None

async def cmd_add_spec(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_spec <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
    await db.add_specialization(parts[1].strip())
    await message.answer(f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è '{parts[1].strip()}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

async def cmd_broadcast_journalists(message: types.Message):
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_journalists <—Ç–µ–∫—Å—Ç>")
    for tg in await db.get_all_user_ids_by_role('journalist'):
        await bot.send_message(tg, text[2])
    await message.answer("–†–∞–∑–æ—Å–ª–∞–Ω–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∞–º.")

async def cmd_broadcast_speakers(message: types.Message):
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_speakers <—Ç–µ–∫—Å—Ç>")
    for tg in await db.get_all_user_ids_by_role('speaker'):
        await bot.send_message(tg, text[2])
    await message.answer("–†–∞–∑–æ—Å–ª–∞–Ω–æ —Å–ø–∏–∫–µ—Ä–∞–º.")

async def cmd_broadcast_all(message: types.Message):
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast_all <—Ç–µ–∫—Å—Ç>")
    all_ids = set(await db.get_all_user_ids_by_role('journalist') + await db.get_all_user_ids_by_role('speaker'))
    for tg in all_ids:
        await bot.send_message(tg, text[2])
    await message.answer("–†–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º.")

async def cmd_export(message: types.Message):
    # 1) –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    users = await db.get_all_users()
    requests = await db.get_all_requests()

    # 2) –ü–æ–ª—å–∑—É–µ–º—Å—è pandas, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π xlsx
    df_users = pd.DataFrame(users, columns=['id','username','email','role'])
    buf1 = BytesIO()
    df_users.to_excel(buf1, index=False, engine='openpyxl')
    buf1.seek(0)
    # –ë–µ—Ä—ë–º –∏–º–µ–Ω–Ω–æ bytes, –∞ –Ω–µ —Å–∞–º –æ–±—ä–µ–∫—Ç BytesIO
    data1 = buf1.getvalue()
    file1 = BufferedInputFile(data1, filename='users.xlsx')

    df_reqs = pd.DataFrame(
        requests,
        columns=['id','journalist','spec','topic','deadline','format','content','status','chosen_speaker']
    )
    buf2 = BytesIO()
    df_reqs.to_excel(buf2, index=False, engine='openpyxl')
    buf2.seek(0)
    data2 = buf2.getvalue()
    file2 = BufferedInputFile(data2, filename='requests.xlsx')

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_document(chat_id=message.chat.id, document=file1)
    await bot.send_document(chat_id=message.chat.id, document=file2)
    await message.answer("üìä –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤!")

async def cmd_status_all(message: types.Message):
    text = "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
    for r in await db.get_all_requests():
        text += f"ID {r[0]}: {r[3]} ‚Äî {r[7]}\n"
    await message.answer(text)

def register_handlers_admin(dp: Dispatcher, bot_obj, email_func):
    global bot, send_email
    bot = bot_obj
    send_email = email_func
    dp.message.register(cmd_add_spec, Command('add_spec'), StateFilter(None))
    dp.message.register(cmd_broadcast_journalists, Command('broadcast_journalists'), StateFilter(None))
    dp.message.register(cmd_broadcast_speakers, Command('broadcast_speakers'), StateFilter(None))
    dp.message.register(cmd_broadcast_all, Command('broadcast_all'), StateFilter(None))
    dp.message.register(cmd_export, Command('export'), StateFilter(None))
    dp.message.register(cmd_status_all, Command('status_all'), StateFilter(None))
